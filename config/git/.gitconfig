# vim:tabstop=4:shiftwidth=4:noexpandtab:
[user]
	name = Clay Dunston
	email = dunstontc@gmail.com
[github]
	name = tcd
[credential]
	helper = osxkeychain
[push]
	default = simple
[help]
	autocorrect = 1            # Automatically correct and execute mistyped commands
[merge]
	log = true                 # Include summaries of merged commits in newly created merge commit messages
[diff]
	renames = copies           # Detect copies as well as renames
[diff "bin"]
	textconv = hexdump -v -C   # Use `hexdump` to diff binary files
[commit]
	# https://help.github.com/articles/signing-commits-using-gpg/
	# gpgsign = true
[core]
	excludesfile = ~/.gitignore
	# attributesfile = ~/.gitattributes

	# Make `git rebase` safer on macOS
	# @see <http://www.git-tower.com/blog/make-git-rebase-safe-on-osx/>
	trustctime = false

	# Prevent showing files whose names contain non-ASCII symbols as unversioned.
	# http://michael-kuehnel.de/git/2014/11/21/git-mac-osx-and-german-umlaute.html
	precomposeunicode = false

	# Speed up commands involving untracked files such as `git status`.
	# https://git-scm.com/docs/git-update-index#_untracked_cache
	untrackedCache = true

[alias]
	aliases = "config --get-regexp alias"
	also = "commit --amend --no-edit"
	abort = "reset --hard origin/master"
	ca = "!git add -A && git commit -av"
	c = "clone --recursive"
	d = !"git diff-index --quiet HEAD -- || clear; git --no-pager diff --patch-with-stat"
	di = !"d() { git diff --patch-with-stat HEAD~$1; }; git diff-index --quiet HEAD -- || clear; d"
	go = "!f() { git checkout -b \"$1\" 2> /dev/null || git checkout \"$1\"; }; f"
	l = "log --pretty=oneline -n 20 --graph --abbrev-commit"
	p = !"git pull; git submodule foreach git pull origin master"
	s = "status -s"

	# Shorthand for dealing with upstream remotes.
	upf = "fetch upstream master -v"
	upp = "pull upstream master -v"

	# Show verbose output about tags, branches or remotes.
	tags = "tag -l"
	branches = "branch -a"
	remotes = "remote -v"

	# @description Interactive rebase with the given number of latest commits.
	reb = "!r() { git rebase -i HEAD~$1; }; r"

	# Find branches containing commit.
	fb = "!f() { git branch -a --contains $1; }; f"
	# Find tags containing commit.
	ft = "!f() { git describe --always --contains $1; }; f"
	# Find commits by source code.
	fc = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short -S$1; }; f"
	# Find commits by commit message.
	fm = "!f() { git log --pretty=format:'%C(yellow)%h  %Cblue%ad  %Creset%s%Cgreen  [%cn] %Cred%d' --decorate --date=short --grep=$1; }; f"

# URL shorthands
#
# [url "git@github.com:"]
# 	insteadOf = "gh:"
# 	pushInsteadOf = "github:"
# 	pushInsteadOf = "git://github.com/"
#
# [url "git://github.com/"]
# 	insteadOf = "github:"
#
# [url "git@gist.github.com:"]
# 	insteadOf = "gst:"
# 	pushInsteadOf = "gist:"
# 	pushInsteadOf = "git://gist.github.com/"
#
# [url "git://gist.github.com/"]
# 	insteadOf = "gist:"

[color]
	grep = auto
	ui = auto
[color "branch"]
	current = magenta
	local = magenta reverse
	remote = blue
	upstream = cyan
	plain = normal
[color "diff"]
	meta = normal
	context = black bold
	frag = magenta bold # line info
	old = red # deletions
	new = green # additions
	commit = yellow bold
[color "status"]
	branch = magenta
	localBranch = magenta
	remoteBranch = magenta reverse
	header = normal
	added = green reverse
	changed = green
	untracked = yellow
	unmerged = red
	nobranch = red reverse
