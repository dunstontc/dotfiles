# priority -50

snippet encoding "Encoding for files with multibyte characters" b
scriptencoding utf-8
endsnippet

snippet gvar "Global / configuration variable" b
if !exists("g:${1:MyUltraImportantVar}")
  let g:$1 = ${2:"${3:<tab>}"}
endif
endsnippet

snippet guard "script reload guard" b
if exists('${1:did_`!p snip.rv = snip.fn.replace('.','_')`}') || &cp${2: || version < 700}
  finish
endif
let $1 = 1$3
endsnippet

snippet func "function" b
function! ${1:function_name}($2) ${3:abort}
  ${4:" code}
endfunction
endsnippet

snippet ifelse "if else"
if ($1)
  $2
else
  $3
endif $4
endsnippet

snippet execute "execute('<command>')"
  execute(${2:'$1'})$0
endsnippet

snippet user_command "Define a user command." b
command! ${1:-nargs=$2} ${3:Cmd} ${4:cmd}${6:(${5:<f-args>})}
endsnippet

snippet autogroup "Group of autocommands"
augroup $1
  ${2:autocmd!}
  $0
augroup END
endsnippet

#  =============================================================================

snippet pla "Positive Look-Ahead"
\($0\)\@=
endsnippet

snippet plb "Positive Look-Behind"
\($0\)\@<=
endsnippet

snippet nla "Negative Look-Ahead"
\($0\)\@!
endsnippet

snippet nlb "Negative Look-Behind"
\($0\)\@<!
endsnippet

snippet nocap "Noncapturing Group"
\%($0\)
endsnippet

snippet group "Regex group"
\($0\)
endsnippet

# ==============================================================================
#  Plugins
# ==============================================================================

snippet cdap "call dein#add('plugin')"
call dein#add('${1:`!v @+`}')$0
endsnippet

snippet cdaf "call dein#add('filetype support')"
call dein#add('${1:`!v getreg('+')`}', {'lazy':1, 'on_ft': [$2]})$0
endsnippet

snippet cdal "call dein#add('lazy')" b
call dein#add('${1:`!v getreg('+')`}', { 'lazy'  : 1, '$2': '$3', })$0
endsnippet

snippet menu_item "Quickmenu Item" b
call g:quickmenu#append(
      \ '${1:name}',
      \ '${2:command}',
      \ '${3:description}',
      \ '${4:filetypes}', 0, '${5:shortcut}')
endsnippet

snippet hilite "Syntax Highlighting Function" b
call <sid>hi('${1:`!v @+`}',    ${2:{}},   ${3:{}}, ${4:'none'}, ${5:{}})$0
endsnippet

# ==============================================================================
#  Dividers
# ==============================================================================

snippet header "File, Author, & License" b
" ==============================================================================
"  FILE: `!v expand("%:t")`
"  AUTHOR: Clay Dunston <dunstontc@gmail.com>
"  License: ${3:MIT license}
"  Last Modified: `!v strftime("%Y-%m-%d")`
" ==============================================================================
$0
endsnippet

# snippet divider "Divider" b
# " ==============================================================================
# endsnippet
#
# snippet section "Section Divider" b
# " ==============================================================================
# "  === ${1:title} ===
# " ==============================================================================
# $0
# endsnippet


# ==============================================================================
#  Vimdoc
# ==============================================================================

# global !p
# def create_arg_placeholders(snip):
#     # retrieving singlee line from current string and treat it like tabstops
#     # count
#     placeholders_amount = int(snip.buffer[snip.line].strip())
#
#     # erase current line
#     snip.buffer[snip.line] = ''
#
#     # create anonymous snippet with expected content and number of tabstops
#     anon_snippet_body = ' & '.join(['$' + str(i+1)
#                                     for i in range(placeholders_amount)])
#
#     # expand anonymous snippet
#     snip.expand_anon(anon_snippet_body)
# endglobal
#
# post_jump "create_row_placeholders(snip)"
# snippet "arg(\d+)" "latex table row variable" br
# `!p snip.rv = match.group(1)`
# endsnippet

# ==============================================================================

snippet doc "Vimdoc Block" b
""
" $1
${0:" $2}
endsnippet

snippet func_desc "Vimdoc function decorator."
@function(${1:name})
endsnippet

snippet cmd_desc "Vimdoc command decorator."
@command(${1:name})
endsnippet

snippet flag "Generates a link to a flag defined in the plugin."
@flag(${1:name})
endsnippet

snippet function "Generates a link to a function defined in the plugin." b
""
" @function(${1:name})$2
${0:" $3}
endsnippet

snippet cmd "Generates a link to a command defined in the plugin." b
""
" @command(${1:name})$2
${0:" $3}
endsnippet

snippet setting "Generates a link to a command defined in the plugin." b
""
" @setting(${1:name})$2
${0:" $3}
endsnippet

snippet mapping "Generates a link to a command defined in the plugin." b
""
" @mapping(${1:keys}) [${2:mode}]
${0:" $3}
endsnippet

snippet dict "Generates a link to a dictionary defined in the plugin." b
" @dict(${1:name})
endsnippet

snippet default "Describes the default value of an optional arg." b
" @default ${1:arg}=${2:value}
endsnippet

snippet throws "Describes the type of exceptions that a function or command may throw." b
" @throws ${1:exception}
endsnippet

snippet deprecated "" b
" @deprecated ${1:reason}
endsnippet

# ==============================================================================

snippet section "Allows you to write a new section for the helpfile. The id will be a lowercased version of name if omitted." b
""
" @section ${1:Name}, ${2:id}
${0:" $3}
endsnippet

snippet subsection "Defines a subsection (heading) within a section block." b
""
" @subsection ${1:name}
${0:" $2}
endsnippet

snippet public "Marks a function public. In most plugins, functions are private by default, though this default may be overridden on a per-plugin basis." b
""
" @public
${0:" $1}
endsnippet

snippet private "Marks a function as private." b
""
" @private $1
${0:" $2}
endsnippet

snippet example "Example for documentation" b
" >
"   $0
" <
endsnippet

# snippet @plugin(attr) "Outputs some plugin data, such as the name or author. `attr` must be one of stylized, name, or author. If the attr (and parenthesis) are left off, stylized is used."
# " @plugin(${1:attr})
# endsnippet
# snippet @stylized "Allows you to define the stylized version of a plugin name."
# " @stylized ${1:name}
# endsnippet
# snippet @library "Marks your plugin as a library plugin. This makes functions public by default."
# " @library $0
# endsnippet

# snippet @parentsection "Defines the current section as a child of the given section. Must be contained within a @section block."
# " @parentsection ${1:id}
# endsnippet

# snippet @backmatter  "Block to be rendered at the end of the given section."
# " @backmatter ${1:id}
# endsnippet

# snippet @order "Allows you to define the order of the sections. Sections with a `@parentsection` may not be included here."
# " @order ${1:...}
# endsnippet

# snippet @dict "(above blank lines) allows you to define a new dictionary."
# ""
# " @dict ${1:name}
# " $0
# endsnippet

# snippet @dict "(above a function) allows you to add a function to a dictionary."
# ""
# " @dict ${1:dict.fn}
# " $0
# endsnippet

# snippet @usage "Allows you to rename and reorder the arguments of a function or command."
# " @usage ${1:plugin} ${2:[operation...]}
# endsnippet

# snippet @all "Denotes that the remainder of the block will be included in all usages (in the case of multiple overloaded usages)."
# " @all $0
# endsnippet

# snippet @function "Allows you to alter the function tag directly, for when @usage does not offer enough control."
# " @function ${1:...}
# endsnippet

# snippet @command "Allows you to alter the command tag directly, for when @usage does not offer enough control."
# " @command ${1:...}
# endsnippet

# snippet @setting "Declares a setting (global or per-buffer configuration variable)."
# " @setting ${1:name}
# endsnippet

# vim:ft=snippets:
