#  =============================================================================
#  === Tests ===
#  =============================================================================
global !p
def SafeSnip(snip):
    # clipboard_content = vim.call('getreg', '+', 1)
    clipboard_content = vim.eval('getreg', '+', 1)
    return clipboard_content
    # if snip.tabstop != 1:
        # return
endglobal

snippet batsop "Tabstop Test"
testing
${0:`!v getreg('+')`}
her
endsnippet

# id:`!v tcd#Count("id:")`$0
snippet newid "Get a new id"
id:`!p vim.command('normal :call tcd#Count("id:")"\<CR>")')`$0
endsnippet

# `!v @s = @\"`
# command ${1:-nargs=$2} ${3:Cmd} ${4:cmd}${5:(<q-args>)}
# post_expand 'vim.call("execute", "tcd#ReReg(\'0\', \'s\')")'
# post_jump "expand(snip)"
# snippet vcmd "Define a user command." b
# ${1:paste}
# endsnippet

# snippet = "desc" "snip.last_placeholder" Ae
# `!p snip.rv = snip.context.current_text` == nil
# endsnippet

# global !p
# def insert_method_call(name):
#   vim.command('normal G')
#   snip.expand_anon(name + '($1)\n')
# endglobal
#
# post_jump "if snip.tabstop == 0: insert_method_call(snip.tabstops[1].current_text)"
# snippet d "method declaration" b
# def $1():
#   $2
# endsnippet
#
# post_jump "if snip.tabstop == 0: SafeSnip()"

